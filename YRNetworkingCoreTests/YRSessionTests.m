//
//  YRSessionTests.m
//  YRNetworkingCoreTests
//
//  Created by Yuriy Romanchenko on 2/28/19.
//  Copyright Â© 2019 Yuriy Romanchenko. All rights reserved.
//

#import <XCTest/XCTest.h>

#import "YRNetworking.h"

@interface YRSessionTests : XCTestCase
@end

@implementation YRSessionTests

- (void)testDummySession {
    YRSessionProtocol dummyProto = {
        .lifecycleCallbacks = {
            .invalidateCallback = ^(YRSessionProtocolRef proto) {
                NSLog(@"[DummyProto]: Invalidate everything.");
            },
            .destroyCallback = ^(YRSessionProtocolRef proto) {
                NSLog(@"[DummyProto]: Destroy ((((((");
            }
        },
        .protocolCallbacks = {
            .connectCallback = ^(YRSessionProtocolRef proto) {
                NSLog(@"[DummyProto]: Hello world! (but really posing as connecting, hehe)");
            },
            .waitCallback = ^(YRSessionProtocolRef proto) {
                NSLog(@"[DummyProto]: Posing as waiting for incoming connection.");
            },
            .closeCallback = ^(YRSessionProtocolRef proto) {
                NSLog(@"[DummyProto]: Closing non-existing connection.");
            },
            .sendCallback = ^(YRSessionProtocolRef proto, const void *payload, YRPayloadLengthType length) {
                NSLog(@"[DummyProto]: Asked to send some data, but I won't, hehe, I'm dummy protocol!");
            },
            .receiveCallback = ^(YRSessionProtocolRef proto, const void *payload, YRPayloadLengthType length) {
                NSLog(@"[DummyProto]: Received something, which I will ignore as a real dummy protocol");
            }
        },
        .clientCallbacks = {
            .sendCallback = ^(YRSessionProtocolRef proto, const void *payload, YRPayloadLengthType length) {
                NSLog(@"[DummyProto]: Real data that should be send that is generated by protocol comes here!");
            },
            .receiveCallback = ^(YRSessionProtocolRef proto, const void *payload, YRPayloadLengthType length) {
                NSLog(@"[DummyProto]: Filtered data for receiving goes here.");
            }
        }
    };
    
    YRSessionRef session = YRSessionCreate(&dummyProto);
    
    YRSessionWait(session);
    YRSessionClose(session);
    YRSessionConnect(session);
    
    int32_t somePayload = 42;
    YRSessionSend(session, &somePayload, sizeof(int32_t));
    
    int32_t rcvPayload = 121;
    YRSessionReceive(session, &rcvPayload, sizeof(int32_t));
    
    YRSessionInvalidate(session);
    
    YRSessionRelease(session);
}

@end
